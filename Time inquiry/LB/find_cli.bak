#pragma warning(disable : 4786)
#include <set>
#include <time.h>
#include "../struct.h"
#include "../defines.h"
#include "errorlevel.h"
struct Client {                     /* 会话信息 */
    unsigned int         usr_id;
    unsigned int         cli_id;
    unsigned int         Timeout;   /* 会话超时 */
    unsigned long        c_ip;
    unsigned short       c_port;
    bool operator< (const Client &p) const { /* 重载<运算符 */
        if( usr_id == p.usr_id )
            return cli_id < p.cli_id;
        else
            return usr_id < p.usr_id;
	};
}Client;
struct Client ci = {0, 0, 30, 0, 0};
struct Client cs = {0, 0, 30, 0, 0};
std::set<struct Client> Clint;
std::set<struct Client>::iterator Clis,Clid;
std::pair<std::set<struct Client>::iterator,bool> pairc;
extern "C" HANDLE   Mutex_f;
extern "C" char     dt[16], tm[16];
/*************************************************************************************************************
 * extern "C" unsigned int Select_c(unsigned int id)
 * 参数：*id : key
 * 功能：通过KEY找VALUE
 *************************************************************************************************************/
extern "C" int Select_c(struct Packet *pkt, struct sockaddr_in *src, struct sockaddr_in *dst) {
    cs.usr_id = pkt->id.usr_id;
    cs.cli_id = pkt->id.src_id;
    if( WaitForSingleObject(Mutex_f, INFINITE) )
        PRINT(STD_ERROR, STD_TIME, "Wait Mutex_f error!!!", "Select_c", GetLastError());
    Clis = Clint.find(cs);
    if( Clis == Clint.end() ) {
        dst->sin_addr.s_addr = 0;
    } else {
        Clis->Timeout = 30;
        dst->sin_port = Clis->c_port;
        dst->sin_addr.s_addr = Clis->c_ip;
    }
    if( !ReleaseMutex(Mutex_f) )
        PRINT(STD_ERROR, STD_TIME, "Release Mutex_f error!!!", "Select_c", GetLastError());
    return !dst->sin_addr.s_addr;
}
/*************************************************************************************************************
 * extern "C" int Insert_c(unsigned int id, unsigned int value)
 * 参数：id    : key
 *       value : 位置
 * 功能：插入KEY-VALUE对
 *************************************************************************************************************/
extern "C" int Insert_c(struct ID *pid, struct sockaddr_in *cli, struct sockaddr_in *ser, unsigned int pick) {
    ci.usr_id = pid->usr_id;
    ci.cli_id = pid->src_id;
    ci.c_ip   = cli->sin_addr.s_addr;
    ci.c_port = cli->sin_port;
    if( WaitForSingleObject(Mutex_f, INFINITE) )
        PRINT(STD_ERROR, STD_TIME, "Wait Mutex_f error!!!", "Insert_c", GetLastError());
    pairc = Clint.insert(ci);
    if( !ReleaseMutex(Mutex_f) )
        PRINT(STD_ERROR, STD_TIME, "Release Mutex_f error!!!", "Insert_c", GetLastError());
    return !pairc.second;
}
/*************************************************************************************************************
 * extern "C" void Delete_c()
 * 参数：
 * 功能：删除超时的KEY-VALUE对
 *************************************************************************************************************/
extern "C" void Delete_c() {
    static unsigned int j,size;
    j = WaitForSingleObject(Mutex_f, 100);
    if( WAIT_TIMEOUT == j ) return;
    else if( j ) {
        PRINT(STD_ERROR, STD_TIME, "Wait Mutex_f error!!!", "Delete_c", GetLastError());
    }
    size = Clint.size();
    Clid = Clint.begin();
    for(j=0 ; j<size ; j++) {
        if(Clid->Timeout-- >= 0) Clid++; /* 没超时，继续减 */
        else Clid = Clint.erase(Clid);   /* 已超时，删除 */
    }
    if( !ReleaseMutex(Mutex_f) )
        PRINT(STD_ERROR, STD_TIME, "Release Mutex_f error!!!", "Delete_c", GetLastError());
}